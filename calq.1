.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "CALQ 1"
.TH CALQ 1 "2021-09-19" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
calq \- Text\-mode RPN calculator
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
calq [options]
.PP
.Vb 3
\& Options:
\&    \-help|\-help1|\-help2  Show short|medium|long usage message
\&    \-man                 Show long usage message (invokes pager)
\&
\&    \-[no]readline Use Perl::ReadLine for input (default if available)
\&    \-debugging    Debugging (developer option)
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBcalq\fR (formerly called \fBcalc\fR) is a text-mode \s-1RPN\s0 calculator
.PP
Operands and commands may be entered as text or as command-line arguments.
Multiple command may be entered on a line.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-help\fR" 4
.IX Item "-help"
Show short usage message
.IP "\fB\-help1\fR" 4
.IX Item "-help1"
Show medium usage message
.IP "\fB\-help2\fR" 4
.IX Item "-help2"
Show long usage message
.IP "\fB\-man\fR" 4
.IX Item "-man"
Show long usage message using \fBperldoc\fR, invokes pager
.IP "\fB\-[no]readline\fR" 4
.IX Item "-[no]readline"
Use \f(CW\*(C`Perl::ReadLine\*(C'\fR for input (enabled by default if available)
.IP "\fB\-hexadecimal\fR" 4
.IX Item "-hexadecimal"
Use hexadecimal mode.  Hexadecimal input still requires \*(L"0x\*(R"
prefix, but output shows hexadecimal integers.  See also \fBhexmode\fR
and \fBdecmode\fR commands.  Can be abbreviated to \fB\-hex\fR.
.IP "\fB\-debugging\fR" 4
.IX Item "-debugging"
Enable debugging (developer option)
.SH "COMMANDS AND OPERANDS"
.IX Header "COMMANDS AND OPERANDS"
.IP "\fB?, help\fR" 4
.IX Item "?, help"
Show help message
.IP "\fBman\fR" 4
.IX Item "man"
Show man page (like \f(CW\*(C`calq \-man\*(C'\fR)
.IP "\fBnumber\fR" 4
.IX Item "number"
Push a number onto the stack
.Sp
The number may be integer (decimal or hexadecimal) or floating-point.
.IP "\fBnum:num:...\fR" 4
.IX Item "num:num:..."
Push a number in \s-1HH:MM:SS\s0 format (base 60)
.IP "\fBI:number\fR" 4
.IX Item "I:number"
Push a BigInt on the stack
.IP "\fBB:number\fR" 4
.IX Item "B:number"
Push a BigFloat on the stack
.IP "\fB<num>_<unit>\fR" 4
.IX Item "<num>_<unit>"
num * unit, where <unit> can be any variable name
.Sp
Anything not recognized as a number or command is pushed onto the
stack as a string.
.IP "\fB+, \-, *, /, %, **\fR" 4
.IX Item "+, -, *, /, %, **"
Arithmetic operators
.IP "\fB\-\-\fR" 4
.IX Item "--"
Negate
.IP "\fB//\fR" 4
.IX Item "//"
Reciprocal
.IP "\fB%%\fR" 4
.IX Item "%%"
Push quotient and remainder
.IP "\fB& | ^ ~ << >>\fR" 4
.IX Item "& | ^ ~ << >>"
Bitwise operators
.IP "\fBsumn\fR" 4
.IX Item "sumn"
Sum of top \fB\s-1TOS\s0\fR stack elements
.Sp
For example \fB10 20 30 3 sumn\fR yields \fB30\fR
.IP "\fBdup\fR" 4
.IX Item "dup"
Duplicate \s-1TOS\s0 (top of stack)
.IP "\fBdrop\fR" 4
.IX Item "drop"
Drop \s-1TOS\s0
.IP "\fBdropn\fR" 4
.IX Item "dropn"
Drop \fB\s-1TOS+1\s0\fR items from stack
.IP "\fBpick\fR" 4
.IX Item "pick"
Nth stack element; \fB1 pick\fR is equivalent to <dup>
.IP "\fBdepth\fR" 4
.IX Item "depth"
Push stack depth
.IP "\fBclear\fR" 4
.IX Item "clear"
Clear stack; equivalent to \fBdepth dropn\fR
.IP "\fBswap\fR" 4
.IX Item "swap"
Swap top two stack elements
.IP "\fBsin, cos, tan, asin, acos, atan\fR" 4
.IX Item "sin, cos, tan, asin, acos, atan"
Trigonometric functions (in radians)
.IP "\fBatan2\fR" 4
.IX Item "atan2"
\&\fBatan(y/x)\fR
.IP "\fBdeg\fR" 4
.IX Item "deg"
Convert degrees to radians
.IP "\fBrad\fR" 4
.IX Item "rad"
Convert radians to degrees
.IP "\fBexp\fR" 4
.IX Item "exp"
\&\fBe**x\fR
.IP "\fBln, loge\fR" 4
.IX Item "ln, loge"
log base \fBe\fR
.IP "\fBlog, log10\fR" 4
.IX Item "log, log10"
log base 10
.IP "\fBlg, log2\fR" 4
.IX Item "lg, log2"
log base 2
.IP "\fBint\fR" 4
.IX Item "int"
Integer part (truncate towards 0)
.IP "\fBfrac\fR" 4
.IX Item "frac"
Fractional part
.IP "\fBsrand\fR" 4
.IX Item "srand"
Set random seed
.IP "\fBsrandx\fR" 4
.IX Item "srandx"
Set random seed to specified value
.IP "\fBrand\fR" 4
.IX Item "rand"
Random number between 0.0 and 1.0
.IP "\fBsqrt\fR" 4
.IX Item "sqrt"
Square root
.IP "\fBhhmm\fR" 4
.IX Item "hhmm"
Current time in minutes since midnight.
.Sp
\&\fBhhmm hms\fR shows the time in human-readable form.
.IP "\fBvars\fR" 4
.IX Item "vars"
Show all variables
.IP "\fB<name>=\fR" 4
.IX Item "<name>="
Assign variable
.Sp
For example \fB42 answer=\fR assigns the value \fB42\fR to the variable \fBanswer\fR
.IP "\fBofmt=\fR" 4
.IX Item "ofmt="
Show output format (default is \f(CW"%.16g"\fR)
.IP "\fBofmt=<fmt>\fR" 4
.IX Item "ofmt=<fmt>"
Set output format
.IP "\fB.\fR (dot)" 4
.IX Item ". (dot)"
Display \s-1TOS\s0 (top of stack)
.IP "\fBhex\fR" 4
.IX Item "hex"
Display \s-1TOS\s0 in hexadecimal
.IP "\fBoctal\fR" 4
.IX Item "octal"
Display \s-1TOS\s0 in octal
.IP "\fBhms\fR" 4
.IX Item "hms"
Display \s-1TOS\s0 in H:M:S format (base 60) (currently limited to integers)
.IP "\fBhexmode\fR" 4
.IX Item "hexmode"
Enter hexadecimal mode.  Numbers are shown as hexadecimal integers.
\&\*(L"0x\*(R" prefix is still required for hexadecimal input.
.IP "\fBdecmode\fR" 4
.IX Item "decmode"
Enter decimal mode (the default).
.IP "\fBcomma\fR" 4
.IX Item "comma"
Display \s-1TOS\s0 with commas, e.g., \f(CW"12,345,678.901234"\fR
.IP "<,> (comma character)" 4
.IX Item "<,> (comma character)"
Dump stack
.IP "\fBHex\fR" 4
.IX Item "Hex"
Dump stack in hexadecimal
.IP "\fBOctal\fR" 4
.IX Item "Octal"
Dump stack in octal
.IP "\fB\s-1HMS\s0\fR" 4
.IX Item "HMS"
dump stack in H:M:S format (base 60)
.IP "\fBComma\fR" 4
.IX Item "Comma"
Dump stack with commas
.IP "\fB\e\fR" 4
.IX Item ""
Inhibit stack dump
.IP "\fB: ...\fR" 4
.IX Item ": ..."
Evaluate Perl expression (one line only)
.IP "\fB(...)\fR" 4
.IX Item "(...)"
Evaluate Perl expression (no whitespace)
.SH "PREDEFINED VARIABLES"
.IX Header "PREDEFINED VARIABLES"
.IP "\fBpi\fR" 4
.IX Item "pi"
3.141592653589793
.IP "\fBe\fR" 4
.IX Item "e"
2.718281828459045 (Euler's constant)
.IP "\fBphi\fR" 4
.IX Item "phi"
1.618033988749895 (golden ratio)
.IP "\fBK\fR, \fBM\fR, \fBG\fR, \fBT\fR, \fBP\fR, \fBE\fR, \fBZ\fR, \fBY\fR" 4
.IX Item "K, M, G, T, P, E, Z, Y"
Metric prefixes (decimal), 1000, 1000000, ...
.Sp
kilo, mega, giga, tera, peta, exa, zetta, yotta
.IP "\fBKi\fR, \fBMi\fR, \fBGi\fR, \fBTi\fR, \fBPi\fR, \fBEi\fR, \fBZi\fR, \fBYi\fR" 4
.IX Item "Ki, Mi, Gi, Ti, Pi, Ei, Zi, Yi"
Metric prefixes (binary), 1024, 1048576, ...
.Sp
kibi, mebi, gibi, tebi, pebi, exbi, zebi, yobi
.IP "\fBhundred\fR" 4
.IX Item "hundred"
100
.IP "\fBthousand\fR, \fBmillion\fR, \fBbillion\fR, \fBtrillion\fR, \fBquadrillion\fR, \fBquintillion\fR, \fBsextillion\fR, \fBseptillion\fR, \fBoctillion\fR, \fBnonillion\fR, \fBdecillion\fR, \fBundecillion\fR, \fBduodecillion\fR, \fBtredecillion\fR, \fBquattuordecillion\fR, \fBquindecillion\fR, \fBsexdecillion\fR, \fBseptendecillion\fR, \fBoctodecillion\fR, \fBnovemdecillion\fR, \fBvigintillion\fR" 4
.IX Item "thousand, million, billion, trillion, quadrillion, quintillion, sextillion, septillion, octillion, nonillion, decillion, undecillion, duodecillion, tredecillion, quattuordecillion, quindecillion, sexdecillion, septendecillion, octodecillion, novemdecillion, vigintillion"
Powers of 1000
.SH "SOURCE"
.IX Header "SOURCE"
<https://github.com/Keith\-S\-Thompson/calq>
.SH "AUTHOR"
.IX Header "AUTHOR"
Keith Thompson <Keith.S.Thompson@gmail.com>
